<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Supplier Transaction Report</title>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css">
  <style>
    body { background-color: #f5f6fa; }
    .container { margin-top: 40px; max-width: 900px; }
    #toastContainer { position: fixed; top: 20px; right: 20px; z-index: 1055; }
    table tbody tr:hover { background-color: #f1f1f1; }
  </style>
</head>
<body>
<div class="container">
  <h2 class="text-center mb-4">Supplier Transaction Report</h2>

  <!-- Supplier Dropdown -->
  <div class="mb-3">
    <label for="supplierDropdown" class="form-label">Select Supplier</label>
    <select id="supplierDropdown" class="form-select">
      <option value="">-- Select Supplier --</option>
    </select>
  </div>
  <button id="generateReport" class="btn btn-primary mb-2">Generate Report</button>
  <button id="exportExcel" class="btn btn-success mb-2">Export to Excel</button>
  <button id="exportPDF" class="btn btn-danger mb-2">Export to PDF</button>

  <!-- Report Table -->
  <table class="table table-bordered table-striped" id="reportTable">
    <thead class="table-dark">
      <tr>
        <th>#</th>
        <th>Invoice No</th>
        <th>Invoice Date</th>
        <th>Payment Type</th>
        <th>Amount</th>
        <th>Balance</th>
      </tr>
    </thead>
    <tbody id="reportBody">
      <!-- Rows dynamically populated -->
    </tbody>
  </table>
</div>

<!-- Toast container -->
<div id="toastContainer"></div>

<!-- Libraries for XLSX and PDF -->
<script src="https://cdn.jsdelivr.net/npm/xlsx/dist/xlsx.full.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>

<script>
  const supplierDropdown = document.getElementById('supplierDropdown');
  const reportBody = document.getElementById('reportBody');
  const generateBtn = document.getElementById('generateReport');
  const exportExcelBtn = document.getElementById('exportExcel');
  const exportPDFBtn = document.getElementById('exportPDF');
  const reportTable = document.getElementById('reportTable');

  let currentReport = []; // store the generated report for export

  // Load suppliers
  async function loadSuppliers() {
    try {
      const res = await fetch('/api/supplier');
      const suppliers = await res.json();
      suppliers.forEach(s => {
        const option = document.createElement('option');
        option.value = s.supplier_id;
        option.text = s.supplier_name;
        supplierDropdown.add(option);
      });
    } catch(err) {
      showToast("Error loading suppliers", true);
      console.error(err);
    }
  }

  generateBtn.addEventListener('click', async () => {
    const supplier_id = supplierDropdown.value;
    if (!supplier_id) return showToast("Please select a supplier", true);

    try {
      const res = await fetch(`/api/supplier/report/${supplier_id}`);
      const data = await res.json();

      reportBody.innerHTML = '';
      currentReport = [];
      let idx = 1;

      // Opening balance row
      reportBody.innerHTML += `
        <tr>
          <td>${idx}</td>
          <td colspan="4"><strong>Opening Balance</strong></td>
          <td>${data.opening_balance}</td>
        </tr>
      `;
      currentReport.push({ "#": idx, "Invoice No": "Opening Balance", "Invoice Date": "", "Payment Type": "", "Amount": "", "Balance": data.opening_balance });
      idx++;

      // Transaction rows
      data.report.forEach(tx => {
        reportBody.innerHTML += `
          <tr>
            <td>${idx}</td>
            <td>${tx.invoice_no}</td>
            <td>${new Date(tx.invoice_date).toLocaleDateString()}</td>
            <td>${tx.payment_type}</td>
            <td>${tx.amount}</td>
            <td>${tx.balance}</td>
          </tr>
        `;
        currentReport.push({
          "#": idx,
          "Invoice No": tx.invoice_no,
          "Invoice Date": new Date(tx.invoice_date).toLocaleDateString(),
          "Payment Type": tx.payment_type,
          "Amount": tx.amount,
          "Balance": tx.balance
        });
        idx++;
      });
    } catch(err) {
      showToast("Error fetching report", true);
      console.error(err);
    }
  });

  // Export to Excel
  exportExcelBtn.addEventListener('click', () => {
    if (!currentReport.length) return showToast("No data to export", true);
    const ws = XLSX.utils.json_to_sheet(currentReport);
    const wb = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, ws, "Report");
    XLSX.writeFile(wb, "SupplierTransactionReport.xlsx");
  });

  // Export to PDF
  exportPDFBtn.addEventListener('click', () => {
    if (!currentReport.length) return showToast("No data to export", true);
    const { jsPDF } = window.jspdf;
    const doc = new jsPDF();
    doc.text("Supplier Transaction Report", 14, 16);

    const rows = currentReport.map(r => [r["#"], r["Invoice No"], r["Invoice Date"], r["Payment Type"], r["Amount"], r["Balance"]]);
    doc.autoTable({
      head: [["#", "Invoice No", "Invoice Date", "Payment Type", "Amount", "Balance"]],
      body: rows,
      startY: 20
    });
    doc.save("SupplierTransactionReport.pdf");
  });

  // Toast
  function showToast(message, isError=false){
    const toastContainer = document.getElementById('toastContainer');
    const toast = document.createElement('div');
    toast.className = `toast align-items-center text-bg-${isError?'danger':'success'} border-0 mb-2`;
    toast.setAttribute('role','alert');
    toast.setAttribute('aria-live','assertive');
    toast.setAttribute('aria-atomic','true');
    toast.innerHTML = `<div class="d-flex"><div class="toast-body">${message}</div>
      <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button></div>`;
    toastContainer.appendChild(toast);
    const bsToast = new bootstrap.Toast(toast,{delay:3000});
    bsToast.show();
    bsToast._element.addEventListener('hidden.bs.toast',()=>toast.remove());
  }

  loadSuppliers();
</script>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.28/jspdf.plugin.autotable.min.js"></script>
</body>
</html>
