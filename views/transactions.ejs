<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Transactions</title>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css">
  <style>
    body { background-color: #f5f6fa; }
    .container { margin-top: 40px; max-width: 900px; }
    #toastContainer { position: fixed; top: 20px; right: 20px; z-index: 1055; }
  </style>
</head>
<body>

<div class="container">
  <h2 class="text-center mb-4">Transactions</h2>

  <!-- Table -->
  <table class="table table-bordered table-striped">
    <thead class="table-dark">
      <tr>
        <th>#</th>
        <th>Transaction Id</th>
        <th>Supplier</th>
        <th>Invoice No</th>
        <th>Invoice Date</th>
        <th>Payment Type</th>
        <th>Amount</th>
      </tr>
    </thead>
    <tbody id="transactionTableBody">
      <!-- Rows populated dynamically -->
    </tbody>
  </table>

  <!-- Pagination -->
  <nav>
    <ul class="pagination justify-content-center" id="paginationControls">
      <!-- Pagination buttons dynamically added -->
    </ul>
  </nav>
</div>

<!-- Toast container -->
<div id="toastContainer"></div>

<script>
  let currentPage = 1;
  const limit = 10;

  async function loadTransactions(page = 1) {
    try {
      const res = await fetch(`/api/transaction?page=${page}&limit=${limit}`);
      const data = await res.json();

      const tbody = document.getElementById('transactionTableBody');
      tbody.innerHTML = '';

      if (!data.transactions.length) {
        tbody.innerHTML = `<tr><td colspan="6" class="text-center">No transactions found.</td></tr>`;
      } else {
        data.transactions.forEach((tx, idx) => {
          const row = `<tr>
            <td>${(data.page-1)*limit + idx + 1}</td>
            <td>${tx.transaction_id}</td>
            <td>${tx.supplier.supplier_name || ''}</td>
            <td>${tx.invoice_no}</td>
            <td>${tx.invoice_date ? new Date(tx.invoice_date).toLocaleDateString() : ''}</td>
            <td>${tx.payment_type}</td>
            <td>${tx.amount}</td>
          </tr>`;
          tbody.insertAdjacentHTML('beforeend', row);
        });
      }

      // Setup pagination
      setupPagination(data.page, data.totalPages);
    } catch (err) {
      console.error("Error loading transactions:", err);
      showToast("Error loading transactions", true);
    }
  }

  function setupPagination(current, totalPages) {
    const pagination = document.getElementById('paginationControls');
    pagination.innerHTML = '';

    const prevDisabled = current <= 1 ? 'disabled' : '';
    const nextDisabled = current >= totalPages ? 'disabled' : '';

    pagination.insertAdjacentHTML('beforeend', `<li class="page-item ${prevDisabled}">
      <button class="page-link" onclick="changePage(${current-1})">Previous</button></li>`);

    for (let i = 1; i <= totalPages; i++) {
      const active = i === current ? 'active' : '';
      pagination.insertAdjacentHTML('beforeend', `<li class="page-item ${active}">
        <button class="page-link" onclick="changePage(${i})">${i}</button></li>`);
    }

    pagination.insertAdjacentHTML('beforeend', `<li class="page-item ${nextDisabled}">
      <button class="page-link" onclick="changePage(${current+1})">Next</button></li>`);
  }

  function changePage(page) {
    if (page < 1) return;
    currentPage = page;
    loadTransactions(currentPage);
  }

  // ---------- Toast message ----------
  function showToast(message, isError = false) {
    const toastContainer = document.getElementById('toastContainer');
    const toast = document.createElement('div');
    toast.className = `toast align-items-center text-bg-${isError ? 'danger' : 'success'} border-0 mb-2`;
    toast.setAttribute('role', 'alert');
    toast.setAttribute('aria-live', 'assertive');
    toast.setAttribute('aria-atomic', 'true');
    toast.innerHTML = `<div class="d-flex"><div class="toast-body">${message}</div>
      <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button></div>`;
    toastContainer.appendChild(toast);

    const bsToast = new bootstrap.Toast(toast, { delay: 3000 });
    bsToast.show();
    bsToast._element.addEventListener('hidden.bs.toast', () => toast.remove());
  }

  // Load first page on start
  loadTransactions(currentPage);
</script>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
