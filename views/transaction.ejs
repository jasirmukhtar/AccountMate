<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Transaction Form</title>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css">
  <style>
    body { background-color: #f5f6fa; }
    .container { margin-top: 40px; max-width: 600px; }
    .toggle-btn-group button.active { background-color: #007bff; color: white; }
    #toastContainer { position: fixed; top: 20px; right: 20px; z-index: 1055; }
    input[disabled], select[disabled], .toggle-btn-group button[disabled] { background-color: #e9ecef; pointer-events: none; }
  </style>
</head>
<body>
<div class="container">
  <h2 class="text-center mb-4" id="formTitle">Create Transaction</h2>
  <form id="transactionForm">
    <!-- Supplier -->
    <div class="mb-3">
      <label for="supplier" class="form-label">Supplier</label>
      <input type="text" id="supplierSearch" placeholder="Search supplier..." class="form-control mb-1">
      <select name="supplier_id" id="supplierDropdown" class="form-select" required></select>
    </div>

    <!-- Amount -->
    <div class="mb-3">
      <label for="amount" class="form-label">Amount</label>
      <input type="number" step="1" name="amount" id="amount" class="form-control" required>
    </div>

    <!-- Invoice No -->
    <div class="mb-3">
      <label for="invoice_no" class="form-label">Invoice No</label>
      <input type="number" name="invoice_no" id="invoice_no" class="form-control" required>
    </div>

    <!-- Invoice Date -->
    <div class="mb-3">
      <label for="invoiceDate" class="form-label">Invoice Date</label>
      <input type="date" id="invoiceDate" name="invoiceDate" class="form-control" required>
    </div>

    <!-- Payment Type Toggle -->
    <div class="mb-3">
      <label class="form-label">Payment Type</label>
      <div class="btn-group toggle-btn-group" role="group">
        <button type="button" class="btn btn-outline-primary active" data-value="CR">CR</button>
        <button type="button" class="btn btn-outline-primary" data-value="DR">DR</button>
      </div>
      <input type="hidden" name="payment_type" id="payment_type" value="CR">
    </div>

    <button type="submit" class="btn btn-success w-100" id="submitBtn">Create Transaction</button>
    <button type="button" class="btn btn-warning w-100 mt-2" id="editBtn" style="display:none;">Edit</button>
  </form>
</div>

<div id="toastContainer"></div>

<script>
let suppliersList = [];
const urlParams = new URLSearchParams(window.location.search);
const transactionId = urlParams.get('transaction_id');

// ---------- Populate supplier dropdown ----------
async function loadSuppliers() {
  try {
    const res = await fetch('/api/supplier');
    suppliersList = await res.json();
    const dropdown = document.getElementById('supplierDropdown');
    suppliersList.forEach(s => {
      const option = document.createElement('option');
      option.value = Number(s.supplier_id);
      option.text = s.supplier_name;
      dropdown.add(option);
    });

    if(transactionId) loadTransaction(transactionId); // load transaction after suppliers loaded
  } catch (err) {
    console.error("Error loading suppliers", err);
  }
}
loadSuppliers();

// ---------- Searchable dropdown ----------
const searchInput = document.getElementById('supplierSearch');
const dropdown = document.getElementById('supplierDropdown');
searchInput.addEventListener('input', function() {
  const filter = this.value.toLowerCase();
  let firstMatch = null;
  Array.from(dropdown.options).forEach(option => {
    const match = option.text.toLowerCase().includes(filter);
    option.style.display = match ? '' : 'none';
    if(match && !firstMatch) firstMatch = option;
  });
  if(firstMatch) dropdown.value = firstMatch.value;
});

// ---------- Toggle CR / DR ----------
const toggleButtons = document.querySelectorAll('.toggle-btn-group button');
const hiddenInput = document.getElementById('payment_type');

toggleButtons.forEach(btn => {
  btn.addEventListener('click', () => {
    toggleButtons.forEach(b => b.classList.remove('active'));
    btn.classList.add('active');
    hiddenInput.value = btn.getAttribute('data-value');
  });
});

// ---------- Set invoiceDate default ----------
const invoiceDateInput = document.getElementById('invoiceDate');
const today = new Date().toISOString().split('T')[0];
invoiceDateInput.value = today;

// ---------- Load transaction by ID ----------
async function loadTransaction(id) {
  try {
    const res = await fetch(`/api/transaction/${id}`);
    const tx = await res.json();
    if(res.ok) {
      // Pre-fill fields
      dropdown.value = tx.supplier_id;
      searchInput.value = tx.supplier_name;
      invoiceDateInput.value = tx.invoiceDate.split('T')[0];
      document.getElementById('amount').value = tx.amount;
      document.getElementById('invoice_no').value = tx.invoice_no;
      hiddenInput.value = tx.payment_type;
      toggleButtons.forEach(btn => btn.classList.toggle('active', btn.dataset.value === tx.payment_type));

      // Disable fields initially
      dropdown.disabled = true;
      searchInput.disabled = true;
      invoiceDateInput.disabled = true;
      document.getElementById('amount').disabled = true;
      document.getElementById('invoice_no').disabled = true;
      toggleButtons.forEach(btn => btn.disabled = true);

      // Show edit button
      document.getElementById('editBtn').style.display = 'block';
      document.getElementById('submitBtn').style.display = 'none';
      document.getElementById('formTitle').textContent = 'View Transaction';
    }
  } catch(err) {
    showToast("Error loading transaction", true);
    console.error(err);
  }
}

// ---------- Edit button ----------
document.getElementById('editBtn').addEventListener('click', () => {
  dropdown.disabled = false;
  searchInput.disabled = false;
  invoiceDateInput.disabled = false;
  document.getElementById('amount').disabled = false;
  document.getElementById('invoice_no').disabled = false;
  toggleButtons.forEach(btn => btn.disabled = false);

  document.getElementById('submitBtn').style.display = 'block';
  document.getElementById('editBtn').style.display = 'none';
  document.getElementById('formTitle').textContent = 'Edit Transaction';
});

// ---------- Form submit ----------
const form = document.getElementById('transactionForm');
form.addEventListener('submit', async (e) => {
  e.preventDefault();
  const amount = Number(document.getElementById('amount').value);
  const invoice_no = Number(document.getElementById('invoice_no').value);
  const supplier_id = Number(dropdown.value);
  const payment_type = hiddenInput.value;
  const invoiceDate = invoiceDateInput.value;

  if(!amount || !invoice_no || !supplier_id || !payment_type || !invoiceDate){
    showToast("Please fill all fields!", true);
    return;
  }

  const payload = { amount, invoice_no, supplier_id, payment_type, invoiceDate };
  const method = transactionId ? 'PUT' : 'POST';
  const url = transactionId ? `/api/transaction/${transactionId}` : '/api/transaction';

  try {
    const res = await fetch(url, {
      method,
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    });
    const data = await res.json();
    if(res.ok){
      showToast(transactionId ? "Transaction updated successfully!" : "Transaction created successfully!");
      // Reset form only if creating new transaction
      if(!transactionId){
        form.reset();
        dropdown.selectedIndex = 0;
        invoiceDateInput.value = today;
      }
    } else {
      showToast(data.message || "Error", true);
    }
  } catch(err) {
    showToast("Error submitting transaction", true);
    console.error(err);
  }
});

// ---------- Toast ----------
function showToast(message, isError=false){
  const toastContainer = document.getElementById('toastContainer');
  const toast = document.createElement('div');
  toast.className = `toast align-items-center text-bg-${isError?'danger':'success'} border-0 mb-2`;
  toast.setAttribute('role','alert');
  toast.setAttribute('aria-live','assertive');
  toast.setAttribute('aria-atomic','true');
  toast.innerHTML = `<div class="d-flex"><div class="toast-body">${message}</div>
    <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button></div>`;
  toastContainer.appendChild(toast);
  const bsToast = new bootstrap.Toast(toast,{delay:3000});
  bsToast.show();
  bsToast._element.addEventListener('hidden.bs.toast',()=>toast.remove());
}
</script>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
